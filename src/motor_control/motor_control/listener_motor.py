import rclpyfrom rclpy.node import Nodefrom std_msgs.msg import Stringfrom dynamixel_sdk import PortHandler, PacketHandler, COMM_SUCCESS# 제어 테이블 주소ADDR_TORQUE_ENABLE = 64ADDR_OPERATING_MODE = 11ADDR_GOAL_VELOCITY = 104# 프로토콜 버전PROTOCOL_VERSION = 2.0BAUDRATE = 57600# 포트 이름DEVICENAME_1 = '/dev/left_wheel'   # 왼쪽 바퀴 포트DEVICENAME_2 = '/dev/right_wheel'  # 오른쪽 바퀴 포트# 모터 IDDXL_ID_1 = 1DXL_ID_2 = 2# 속도 설정LEFT_WHEEL_FORWARD = 1023RIGHT_WHEEL_FORWARD = -1023LEFT_WHEEL_REVERSE = -1023RIGHT_WHEEL_REVERSE = 1023# 회전 속도 설정LEFT_WHEEL_RIGHT_TURN = int(1023 * 0.1)   # 오른쪽 회전 시 왼쪽 모터 출력: 10%RIGHT_WHEEL_RIGHT_TURN = int(-1023 * 0.7)  # 오른쪽 회전 시 오른쪽 모터 출력: 70%LEFT_WHEEL_LEFT_TURN = int(1023 * 0.7)    # 왼쪽 회전 시 왼쪽 모터 출력: 70%RIGHT_WHEEL_LEFT_TURN = int(-1023 * 0.1)   # 왼쪽 회전 시 오른쪽 모터 출력: 10%portHandler_1 = PortHandler(DEVICENAME_1)portHandler_2 = PortHandler(DEVICENAME_2)packetHandler = PacketHandler(PROTOCOL_VERSION)def initialize_motor(port_handler, motor_id, logger):    """모터 초기화"""    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(port_handler, motor_id, ADDR_TORQUE_ENABLE, 0)    if dxl_comm_result != COMM_SUCCESS or dxl_error != 0:        logger.error(f"모터 {motor_id} 토크 비활성화 실패: {packetHandler.getTxRxResult(dxl_comm_result)}, {packetHandler.getRxPacketError(dxl_error)}")    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(port_handler, motor_id, ADDR_OPERATING_MODE, 1)    if dxl_comm_result != COMM_SUCCESS or dxl_error != 0:        logger.error(f"모터 {motor_id} 속도 제어 모드 설정 실패: {packetHandler.getTxRxResult(dxl_comm_result)}, {packetHandler.getRxPacketError(dxl_error)}")    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(port_handler, motor_id, ADDR_TORQUE_ENABLE, 1)    if dxl_comm_result != COMM_SUCCESS or dxl_error != 0:        logger.error(f"모터 {motor_id} 토크 활성화 실패: {packetHandler.getTxRxResult(dxl_comm_result)}, {packetHandler.getRxPacketError(dxl_error)}")    else:        logger.info(f"모터 {motor_id} 초기화 완료")class ListenerNode(Node):    def __init__(self):        super().__init__('motor_listener')        self.subscription = self.create_subscription(String, 'motor_command', self.listener_callback, 10)        self.get_logger().info("리스너 노드가 시작되었습니다. 명령을 기다립니다...")        if not portHandler_1.openPort():            self.get_logger().error("왼쪽 바퀴 포트를 열지 못했습니다.")        if not portHandler_2.openPort():            self.get_logger().error("오른쪽 바퀴 포트를 열지 못했습니다.")        portHandler_1.setBaudRate(BAUDRATE)        portHandler_2.setBaudRate(BAUDRATE)        initialize_motor(portHandler_1, DXL_ID_1, self.get_logger())        initialize_motor(portHandler_2, DXL_ID_2, self.get_logger())    def listener_callback(self, msg):        command = msg.data        if command == 'start':            self.start_motors()        elif command == 'stop':            self.stop_motors()        elif command == 'reverse':            self.reverse_motors()        elif command == 'left':            self.turn_left()        elif command == 'right':            self.turn_right()    def start_motors(self):        packetHandler.write4ByteTxRx(portHandler_1, DXL_ID_1, ADDR_GOAL_VELOCITY, LEFT_WHEEL_FORWARD)        packetHandler.write4ByteTxRx(portHandler_2, DXL_ID_2, ADDR_GOAL_VELOCITY, RIGHT_WHEEL_FORWARD)        self.get_logger().info("모터가 전진합니다.")    def stop_motors(self):        packetHandler.write4ByteTxRx(portHandler_1, DXL_ID_1, ADDR_GOAL_VELOCITY, 0)        packetHandler.write4ByteTxRx(portHandler_2, DXL_ID_2, ADDR_GOAL_VELOCITY, 0)        self.get_logger().info("모터가 정지합니다.")    def reverse_motors(self):        packetHandler.write4ByteTxRx(portHandler_1, DXL_ID_1, ADDR_GOAL_VELOCITY, LEFT_WHEEL_REVERSE)        packetHandler.write4ByteTxRx(portHandler_2, DXL_ID_2, ADDR_GOAL_VELOCITY, RIGHT_WHEEL_REVERSE)        self.get_logger().info("모터가 후진합니다.")    def turn_left(self):        packetHandler.write4ByteTxRx(portHandler_1, DXL_ID_1, ADDR_GOAL_VELOCITY, LEFT_WHEEL_LEFT_TURN)        packetHandler.write4ByteTxRx(portHandler_2, DXL_ID_2, ADDR_GOAL_VELOCITY, RIGHT_WHEEL_LEFT_TURN)        self.get_logger().info("모터가 왼쪽으로 회전합니다.")    def turn_right(self):        packetHandler.write4ByteTxRx(portHandler_1, DXL_ID_1, ADDR_GOAL_VELOCITY, LEFT_WHEEL_RIGHT_TURN)        packetHandler.write4ByteTxRx(portHandler_2, DXL_ID_2, ADDR_GOAL_VELOCITY, RIGHT_WHEEL_RIGHT_TURN)        self.get_logger().info("모터가 오른쪽으로 회전합니다.")    def destroy_node(self):        portHandler_1.closePort()        portHandler_2.closePort()        self.get_logger().info("포트가 닫혔습니다.")        super().destroy_node()def main(args=None):    rclpy.init(args=args)    node = ListenerNode()    try:        rclpy.spin(node)    except KeyboardInterrupt:        node.get_logger().info("키보드 인터럽트로 종료되었습니다.")    finally:        node.destroy_node()        rclpy.shutdown()if __name__ == '__main__':    main()